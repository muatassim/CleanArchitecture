/*
Deployment script for CleanArchitectureDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DeployToDatabase "Local"
:setvar UserPassword "CHNWdJskkS@@1q$DZfla"
:setvar DatabaseName "CleanArchitectureDb"
:setvar DefaultFilePrefix "CleanArchitectureDb"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Procedure [dbo].[CreateOrUpdateUser]...';


GO
CREATE PROCEDURE [dbo].[CreateOrUpdateUser]	 
    @login nvarchar(100)
WITH EXECUTE AS CALLER
AS
BEGIN
 SET NOCOUNT ON;
 BEGIN TRY
	  BEGIN TRANSACTION; 
        Print ('Creating User '+@login)
        declare @roleSql nvarchar(max);
        declare @alterRoleSql nvarchar(max);
        declare @viewGrantSql nvarchar(max);
        declare @procedureGrantSql nvarchar(max);
        DECLARE @NewLineChar AS CHAR(3) = SPACE(13) + CHAR(10)
        set @roleSql = 'IF NOT EXISTS(SELECT * FROM sys.sysusers WHERE name = '''+@login+''')'+ @NewLineChar +  
			        ' CREATE USER ['+@login+']'+ @NewLineChar +     
                    ' ALTER USER ['+@login+'] WITH LOGIN = ['+@login+']'+ @NewLineChar +  
                    ' ALTER USER ['+@login+'] WITH DEFAULT_SCHEMA = [dbo]'+ @NewLineChar +   
                    ' ALTER USER ['+@login+'] WITH NAME = ['+@login+'] '+ @NewLineChar ;
			
        set @alterRoleSql = 
                     ' ALTER ROLE [db_datawriter] ADD MEMBER ['+@login+']'+ @NewLineChar +  
                     ' ALTER ROLE [db_datareader] ADD MEMBER ['+@login+']'+ @NewLineChar ;

        SET @procedureGrantSql=''; 
        select @procedureGrantSql+='GRANT EXECUTE ON ['+ CONVERT(varchar(255),s.[name]) +'].['+ CONVERT(VARCHAR(255),obj.[name])  +'] TO ['+@login+']'+ @NewLineChar 
        from
            sys.all_objects as obj
        inner join
            sys.schemas s ON obj.schema_id = s.schema_id
        where obj.type in ('P')
        AND s.name NOT IN ('SYS','INFORMATION_SCHEMA') 

        SET @viewGrantSql=''; 
        select @viewGrantSql+='GRANT Select ON ['+ CONVERT(VARCHAR(255),s.[name]) +'].['+ CONVERT(VARCHAR(255),obj.[name])  +'] TO ['+@login+']'+ @NewLineChar 
        from
            sys.all_objects as obj
        inner join
            sys.schemas s ON obj.schema_id = s.schema_id
        where obj.type in ('V')
        AND s.name NOT IN ('SYS','INFORMATION_SCHEMA') 


        --Select @roleSql; 
        --Select @alterRoleSql;
       -- Select @procedureGrantSql;
       -- Select @viewGrantSql;
        EXEC sp_executesql @roleSql 
        EXEC sp_executesql @alterRoleSql 
        EXEC sp_executesql @procedureGrantSql
        EXEC sp_executesql @viewGrantSql
        Print ('End Creating User '+@login)
 COMMIT TRANSACTION;
 END TRY
 BEGIN CATCH
	   IF XACT_STATE() <> 0
	   ROLLBACK TRANSACTION;
    IF ERROR_PROCEDURE() <> OBJECT_NAME(@@PROCID)
    DECLARE @thisErrorMessage NVARCHAR(4000);
    DECLARE @thisErrorSeverity INT;    DECLARE @thisErrorState INT;
    DECLARE @thisErrorNumber INT;
    SET @thisErrorMessage = ERROR_MESSAGE()+ RTRIM(CONVERT(CHAR,ERROR_PROCEDURE()))
    SET @thisErrorSeverity = ERROR_SEVERITY()
    SET @thisErrorState = ERROR_STATE()
    SET @thisErrorNumber= ERROR_NUMBER()
    DECLARE @thisProcedureErrorID INT; 
    RAISERROR (@thisErrorMessage,@thisErrorSeverity, @thisErrorState );
  END CATCH
 END;
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

---- default schema scripts

---- Default database 





 Print 'DeployToDatabase value is :'+ N'$(DeployToDatabase)'
 IF ('$(DeployToDatabase)' = 'Local')  
  BEGIN
Print 'Executing Login Scripts'
IF EXISTS(SELECT * FROM sys.sql_logins WHERE name = 'CleanArchitectureDbUser')
DROP LOGIN [CleanArchitectureDbUser]

IF NOT EXISTS (SELECT * FROM sys.sql_logins WHERE name = N'CleanArchitectureDbUser')
CREATE LOGIN [CleanArchitectureDbUser] WITH PASSWORD='$(UserPassword)'
	Print 'End Executing Login Scripts'
  END
-- this needs to run on the database not on master  database 

IF EXISTS(SELECT * FROM sys.sysusers WHERE name = 'CleanArchitectureDbUser')
  DROP USER [CleanArchitectureDbUser] 
GO
IF NOT EXISTS (SELECT * FROM sys.sysusers WHERE name = N'CleanArchitectureDbUser')
  CREATE USER [CleanArchitectureDbUser] FROM LOGIN [CleanArchitectureDbUser] WITH DEFAULT_SCHEMA=dbo; 
GO
Print 'Executing Procedure with Params [dbo].[CreateOrUpdateUser]'
PRINT 'Printing Variables '
PRINT 'DatabaseName: $(DatabaseName) '
PRINT 'DefaultDataPath: $(DefaultDataPath) ' 
PRINT 'UserPassword: $(UserPassword) '  

EXEC	[dbo].[CreateOrUpdateUser]
		@login ='CleanArchitectureDbUser'

Print 'Executing Procedure with Params [dbo].[CreateOrUpdateUser]'
 Print 'Deleting Procedure [dbo].[CreateOrUpdateUser]'
Drop Procedure [dbo].[CreateOrUpdateUser]
Print 'End Deleting Procedure [dbo].[CreateOrUpdateUser]'


IF EXISTS(SELECT * FROM sys.procedures where name='CreateOrUpdateUser')
BEGIN
 delete from [dbo].[CreateOrUpdateUser] 
END 


GO

GO
PRINT N'Update complete.';


GO
