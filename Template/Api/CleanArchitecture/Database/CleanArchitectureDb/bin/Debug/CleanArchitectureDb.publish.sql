/*
Deployment script for CleanArchitectureDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DeployToDatabase "Local"
:setvar UserPassword "CHNWdJskkS@@1q$DZfla"
:setvar DatabaseName "CleanArchitectureDb"
:setvar DefaultFilePrefix "CleanArchitectureDb"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Login [DataTransferUser]...';


GO
CREATE LOGIN [DataTransferUser]
    WITH PASSWORD = N'CHNWdJskkS@@1q$DZfla';


GO
PRINT N'Creating User [DataTransferUser]...';


GO
CREATE USER [DataTransferUser] FOR LOGIN [DataTransferUser];


GO
PRINT N'Creating Role Membership [db_datareader] for [DataTransferUser]...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'DataTransferUser';


GO
PRINT N'Creating Role Membership [db_datawriter] for [DataTransferUser]...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datawriter', @membername = N'DataTransferUser';


GO
PRINT N'Creating Table [dbo].[Categories]...';


GO
CREATE TABLE [dbo].[Categories] (
    [CategoryID]   INT           IDENTITY (1, 1) NOT NULL,
    [CategoryName] NVARCHAR (15) NOT NULL,
    [Description]  NTEXT         NULL,
    CONSTRAINT [PK_Categories] PRIMARY KEY CLUSTERED ([CategoryID] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating Permission Permission...';


GO
GRANT CONNECT TO [DataTransferUser];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

---- default schema scripts

---- Default database 





 Print 'DeployToDatabase value is :'+ N'$(DeployToDatabase)'
 IF ('$(DeployToDatabase)' = 'Local')  
  BEGIN
Print 'Executing Login Scripts'
IF EXISTS(SELECT * FROM sys.sql_logins WHERE name = 'CleanArchitectureDbUser')
DROP LOGIN [CleanArchitectureDbUser]

IF NOT EXISTS (SELECT * FROM sys.sql_logins WHERE name = N'CleanArchitectureDbUser')
CREATE LOGIN [CleanArchitectureDbUser] WITH PASSWORD='$(UserPassword)'
	Print 'End Executing Login Scripts'
  END
-- this needs to run on the database not on master  database 

IF EXISTS(SELECT * FROM sys.sysusers WHERE name = 'CleanArchitectureDbUser')
  DROP USER [CleanArchitectureDbUser] 
GO
IF NOT EXISTS (SELECT * FROM sys.sysusers WHERE name = N'CleanArchitectureDbUser')
  CREATE USER [CleanArchitectureDbUser] FROM LOGIN [CleanArchitectureDbUser] WITH DEFAULT_SCHEMA=dbo; 
GO
Print 'Executing Procedure with Params [dbo].[CreateOrUpdateUser]'
PRINT 'Printing Variables '
PRINT 'DatabaseName: $(DatabaseName) '
PRINT 'DefaultDataPath: $(DefaultDataPath) ' 
PRINT 'UserPassword: $(UserPassword) '  

EXEC	[dbo].[CreateOrUpdateUser]
		@login ='CleanArchitectureDbUser'

Print 'Executing Procedure with Params [dbo].[CreateOrUpdateUser]'
 Print 'Deleting Procedure [dbo].[CreateOrUpdateUser]'
Drop Procedure [dbo].[CreateOrUpdateUser]
Print 'End Deleting Procedure [dbo].[CreateOrUpdateUser]'


IF EXISTS(SELECT * FROM sys.procedures where name='CreateOrUpdateUser')
BEGIN
 delete from [dbo].[CreateOrUpdateUser] 
END 


GO

GO
PRINT N'Update complete.';


GO
